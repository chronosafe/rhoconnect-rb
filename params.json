{"name":"Rhoconnect-rb","body":"rhoconnect-rb ![Build Status](https://secure.travis-ci.org/rhomobile/rhoconnect-rb.png)\r\n===\r\n\r\nA ruby library for the [RhoConnect](http://rhomobile.com/products/rhoconnect) App Integration Server.\r\n\r\nUsing rhoconnect-rb, your application's model data will transparently synchronize with a mobile application built on the [Rhodes framework](http://rhomobile.com/products/rhodes), or any of the available [RhoConnect clients](http://rhomobile.com/products/rhoconnect/).  This client includes built-in support for [ActiveRecord](http://ar.rubyonrails.org/) and [DataMapper](http://datamapper.org/) models.\r\n\r\n## Getting started\r\n\r\nLoad the `rhoconnect-rb` library:\r\n\r\n\trequire 'rhoconnect-rb'\r\n\r\nNote, if you are using datamapper, install the `dm-serializer` library and require it in your application.  `rhoconnect-rb` depends on this utility to interact with Rhoconnect applications using JSON.\r\n\t\r\n## Setup the Model\r\nNow include Rhoconnect::Resource in a model that you want to synchronize with your mobile application:\r\n\r\n\tclass Product < ActiveRecord::Base\r\n\t  include Rhoconnect::Resource\r\n\tend\r\n\t\r\nOr, if you are using DataMapper:\r\n\r\n\tclass Product\r\n\t  include DataMapper::Resource\r\n\t  include Rhoconnect::Resource\r\n\tend\r\n\r\n## Partitioning Datasets\r\n\t\r\nNext, your models will need to declare a partition key for `rhoconnect-rb`.  This partition key is used by `rhoconnect-rb` to uniquely identify the model dataset when it is stored in a rhoconnect instance.  It is typically an attribute on the model or related model.  `rhoconnect-rb` supports two types of partitions:\r\n\r\n* :app - No unique key will be used, a shared dataset is synchronized for all users.\r\n* lambda { some lambda } - Execute a lambda which returns the unique key string.\r\n\r\nFor example, the `Product` model above might have a `belongs_to :user` relationship.  This provides us a simple way to organize the `Product` dataset for rhoconnect by reusing this relationship.  The partition identifying a username would be declared as:\r\n\r\n\tclass Product < ActiveRecord::Base\r\n\t  include Rhoconnect::Resource\r\n\t  \r\n\t  belongs_to :user\r\n\t\r\n\t  def partition \r\n\t\tlambda { self.user.username }\r\n\t  end\r\n\tend\r\n\t\r\nNow all of the `Product` data synchronized by rhoconnect will organized by `self.user.username`.  Note: You can also used a fixed key if the dataset doesn't require a dynamic value:\r\n\r\n\tdef partition\r\n\t  :app\r\n\tend\r\n\t\r\nFor more information about Rhoconnect partitions, please refer to the [Rhoconnect docs](http://docs.rhomobile.com/rhoconnect/source-adapters#data-partitioning).\r\n\r\n## Querying Datasets\r\n\r\n`rhoconnect-rb` installs a `/rhoconnect/query` route in your application which the Rhoconnect instance invokes to query the dataset for the dataset you want to synchronize.  This route is mapped to a `rhoconnect_query` method in your model.  This method should return a collection of objects:\r\n\r\n\tclass Product < ActiveRecord::Base\r\n\t  include Rhoconnect::Resource\r\n\t  \r\n\t  belongs_to :user\r\n\t\r\n\t  def partition \r\n\t\tlambda { self.user.username }\r\n\t  end\r\n\t\r\n\t  def self.rhoconnect_query(partition)\r\n\t    Product.includes(:user).where(\"users.username = ?\",partition)\r\n\t  end\r\n\tend\r\n\r\nIn this example, `self.rhoconnect_query` returns a list of products where the partition string (provided by the rhoconnect instance) matches the `user_id` field in the products table.  \r\n\r\n## Configuration and Authentication\r\n\r\n### Running RhoConnect Manually\r\n\r\nConfigure RhoConnect in an initializer like `config/initializers/rhoconnect.rb` (for Rails), or directly in your application (i.e. Sinatra).  Here you will setup the rhoconnect uri (the location of your RhoConnect instance), the api\\_token (see [rhoconnect:get_token](http://docs.rhomobile.com/rhoconnect/command-line#rake-tasks) rake task), and app\\_endpoint (the location of your ruby app):\r\n\r\n\tconfig.uri   = \"http://myrhoconnect.com\"\r\n\tconfig.token = \"secrettoken\"\r\n\tconfig.app_endpoint = \"http://myapp.heroku.com\"\r\n\t\r\nIf `app_endpoint` is defined, your Rhoconnect instance will be configured to query data from the endpoint using the rhoconnect_query method in your model.  For example, if your `app_endpoint` is defined as \"http://myapp.heroku.com\", RhoConnect will query data with:\r\n\r\n\tPOST http://myapp.heroku.com/rhoconnect/query\r\n\r\nExample: \r\n\r\n   \tRhoconnect.configure do |config|\r\n      config.uri   \t\t  = \"http://myrhoconnect-server.com\"\r\n      config.token \t\t  = \"secrettoken\"\r\n\t  config.app_endpoint = \"http://myapp.heroku.com\"\r\n\tend\r\n\t\r\nExample with authentication:\r\n\r\n`rhoconnect-rb` installs a `/rhoconnect/authenticate` route into your application which will receive credentials from the client.  Add block which handles the credentials:\r\n\r\n\tRhoconnect.configure do |config|\r\n      config.uri   = \"http://myrhoconnect-server.com\"\r\n      config.token = \"secrettoken\"\r\n\t  config.authenticate = lambda { |credentials| \r\n        User.authenticate(credentials[:login], credentials[:password]) \r\n\t  }\r\n\tend\r\n\t\r\n### Using the [RhoConnect Heroku Addon](http://docs.rhomobile.com/rhoconnect/heroku-addon)\r\n\r\nIf you're using the [RhoConnect Heroku Addon](http://docs.rhomobile.com/rhoconnect/heroku-addon), then you can omit the config.uri and config.token (they are managed for you):\r\n\r\n\tRhoconnect.configure do |config|\r\n\t  config.authenticate = lambda { |credentials| \r\n\t    User.authenticate(credentials[:login], credentials[:password]) \r\n\t  }\r\n\tend\r\n\t\t\r\n\r\n## Meta\r\nCreated and maintained by Lucas Campbell-Rossen, Vladimir Tarasov and Lars Burgess.\r\n\r\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).","tagline":"A ruby client library for the RhoConnect App Integration Server","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}